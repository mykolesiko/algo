# -*- coding: utf-8 -*-
"""
Created on Fri Oct 23 22:08:04 2020

@author: Asus


E. Кафе
ограничение по времени на тест2 секунды
ограничение по памяти на тест64 мегабайта
вводстандартный ввод
выводстандартный вывод
Около Петиного университета недавно открылось новое кафе, в котором действует следующая система скидок: при каждой покупке более чем на 100 рублей покупатель получает купон, дающий право на один бесплатный обед (при покупке на сумму 100 рублей и меньше такой купон покупатель не получает).

Однажды Пете на глаза попался прейскурант на ближайшие n дней. Внимательно его изучив, он решил, что будет обедать в этом кафе все n дней, причем каждый день он будет покупать в кафе ровно один обед. Однако стипендия у Пети небольшая, и поэтому он хочет по максимуму использовать предоставляемую систему скидок так, чтобы его суммарные затраты были минимальны. Требуется найти минимально возможную суммарную стоимость обедов и номера дней, в которые Пете следует воспользоваться купонами.

Входные данные
В первой строке входного файла записано целое число n (0 ? n ? 100). В каждой из последующих n строк записано одно целое число, обозначающее стоимость обеда в рублях на соответствующий день. Стоимость — неотрицательное целое число, не превосходящее 300.

Выходные данные
В первой строке выдайте минимальную возможную суммарную стоимость обедов. Во второй строке выдайте два числа k1 и k2 — количество купонов, которые останутся неиспользованными у Пети после этих n дней и количество использованных им купонов соответственно.

В последующих k2 строках выдайте в возрастающем порядке номера дней, когда Пете следует воспользоваться купонами. Если существует несколько решений с минимальной суммарной стоимостью, то выдайте то из них, в котором значение k1 максимально (на случай, если Петя когда-нибудь ещё решит заглянуть в это кафе). Если таких решений несколько, выведите любое из них.

https://codeforces.com/group/zJTwakJcKM/contest/299322/problem/E
"""
n = int(input())
THRESHOLD = 100
INF = 10 ** 18
dp = [[INF] * (n + 1) for i in range(n + 1)]
par = [[-1] * (n + 1) for i in range(n + 1)]
dp[0][0] = 0
costs = []
for i in range(n):
    cost = int(input())
    costs.append(cost)
    for j in range(n + 1):
        if dp[i][j] == INF:
            continue
        j1 = j + (cost > THRESHOLD)
        if  dp[i + 1][j1] > dp[i][j] + cost:
            dp[i + 1][j1] = dp[i][j] + cost
            par[i + 1][j1] = 0
        if j:
            if  dp[i + 1][j - 1] > dp[i][j]:
                dp[i + 1][j - 1] = dp[i][j]
                par[i + 1][j - 1] = 1
unusedCoupons = 0
for i in range(1, n + 1):
    if dp[n][i] <= dp[n][unusedCoupons]:
        unusedCoupons = i
ans = dp[n][unusedCoupons]
j = unusedCoupons
uses = []
for i in range(n, 0, -1):
    if  par[i][j] == 1:
        uses.append(i)
        j += 1
    else:
        j -= (costs[i - 1] > THRESHOLD)
print(ans)
print(unusedCoupons, len(uses))
uses.sort()
for x in uses:
    print(x)
    